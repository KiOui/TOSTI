from urllib.parse import urlencode, urlparse, parse_qsl
import requests
from django.conf import settings
import re


def get_openid_request_url(
    openid_server_endpoint, openid_return_url, openid_trust_root, openid_identity
):
    """
    Get the OpenID request URL.

    :param openid_server_endpoint: the OpenID server endpoint as https://[server_name]/[endpoint_location]
    :param openid_return_url: the URL that OpenID has to redirect the authenticated user to
    :param openid_trust_root: the root URL that will be displayed when asking the user for permission to authenticate
    against the OpenID server
    :param openid_identity: the identity that the user wants to use for identifying against the OpenID identity server
    :return: the OpenID request URL with the formatted parameters
    """
    parameters = {
        "openid.mode": "checkid_setup",
        "openid.identity": openid_identity,
        "openid.return_to": openid_return_url,
        "openid.trust_root": openid_trust_root,
    }
    return "{}?{}".format(openid_server_endpoint, urlencode(parameters))


def get_full_user_id(username):
    """
    Get the full user id for the OpenID server.

    This is the reverse of get_username
    :param username: the username of the user
    :return: the full username for the OpenID server, a formatted string with the prefix and postfix specified in
    settings
    """
    return "{}{}{}".format(
        settings.OPENID_USERNAME_PREFIX, username, settings.OPENID_USERNAME_POSTFIX
    )


def create_verification_url(
    openid_server_endpoint,
    openid_assoc_handle,
    openid_signature,
    openid_signed,
    signed_field_values,
):
    """
    Create a verification url for verifying an OpenID.

    :param openid_server_endpoint: the OpenID server endpoint as https://[server_name]/[endpoint_location]
    :param openid_assoc_handle: the association handle provided by the authenticating user (generated by the OpenID
    server)
    :param openid_signature: the signature provided by the authenticating user (generated by the OpenID server)
    :param openid_signed: a list of the fields that are signed by the OpenID server, the fields should not include
    "openid." as prefix
    :param signed_field_values: a dictionary of all field, value pairs of all the fields in the openid_signed list but
    without the "mode" field
    :return: a string with the verification URL
    """
    parameters = {
        "openid.mode": "check_authentication",
        "openid.assoc_handle": openid_assoc_handle,
        "openid.sig": openid_signature,
        "openid.signed": ",".join(openid_signed),
    }

    parameters = {**parameters, **signed_field_values}

    return "{}?{}".format(openid_server_endpoint, urlencode(parameters))


def get_username(openid_identity):
    """
    Get the username from the OpenID full username.

    This is the reverse of get_full_user_id
    :param openid_identity: the OpenID identity
    :return: the username of the user in the full OpenID username
    """
    return re.sub(
        "{}$".format(settings.OPENID_USERNAME_POSTFIX),
        "",
        re.sub("^{}".format(settings.OPENID_USERNAME_PREFIX), "", openid_identity),
    )


def verify_signature(openid_server_endpoint, query_parameters):
    """
    Verify a signature send by an OpenID server.

    :param openid_server_endpoint: the OpenID server endpoint as https://[server_name]/[endpoint_location]
    :param query_parameters: the parameters in the request URL
    :return: the username if the verification succeeded, False otherwise
    """
    signed_field_values = dict()
    for field in query_parameters["openid.signed"].split(","):
        if field != "mode":
            signed_field_values["openid.{}".format(field)] = query_parameters[
                "openid.{}".format(field)
            ]

    verification_url = create_verification_url(
        openid_server_endpoint,
        query_parameters["openid.assoc_handle"],
        query_parameters["openid.sig"],
        query_parameters["openid.signed"].split(","),
        signed_field_values,
    )

    response = requests.get(verification_url)
    if response.status_code == 200:
        response_code = re.sub("is_valid:", "", re.sub("\n", "", response.text))
        if response_code == "true":
            return get_username(query_parameters["openid.identity"])
        else:
            return False
    else:
        return False


def verify_request(openid_server_endpoint, full_request_path):
    """
    Verify a request send by an OpenID server.

    :param openid_server_endpoint: the OpenID server endpoint as https://[server_name]/[endpoint_location]
    :param full_request_path: the full request path (without parsed parameters)
    :return: the username if the verification succeeded, False otherwise
    """
    parsed_url = urlparse(full_request_path)
    query_parameters = dict(parse_qsl(parsed_url.query))

    if query_parameters["openid.mode"] == "id_res":
        return verify_signature(openid_server_endpoint, query_parameters)
    else:
        return False
